/* Generated by JSIL v0.8.2 build 17617. See http://jsil.org/ for more information. */ 
'use strict';
var $asm0A = JSIL.DeclareAssembly("Fusee.Tutorial.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Tutorial");
JSIL.DeclareNamespace("Fusee.Tutorial.Core");
/* class Fusee.Tutorial.Core.FirstSteps */ 

(function FirstSteps$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderCanvas)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Engine.Core.RenderContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.Fusee.Math.Core.float4)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.Fusee.Serialization.TransformComponent)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.Fusee.Serialization.MaterialComponent)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.Fusee.Serialization.MatChannelContainer)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.Fusee.Serialization.SpecularChannelContainer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.Fusee.Serialization.MeshComponent)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm0A.Fusee.Tutorial.Core.SimpleMeshes)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.Fusee.Serialization.SceneNodeContainer)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm15.System.Collections.Generic.List$b1.Of($asm08.Fusee.Serialization.SceneComponentContainer))) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.Fusee.Serialization.SceneContainer)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm15.System.Collections.Generic.List$b1.Of($asm08.Fusee.Serialization.SceneNodeContainer))) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Engine.Core.SceneRenderer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.Fusee.Math.Core.M)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Engine.Core.Time)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm03.Fusee.Engine.Common.ClearFlags)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.Fusee.Math.Core.float4x4)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm15.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float4"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("Fusee.Serialization.SceneComponentContainer")]), null))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm08.TypeRef("Fusee.Serialization.SceneComponentContainer")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.Collections.Generic.List`1", [$asm08.TypeRef("Fusee.Serialization.SceneNodeContainer")]), null))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm08.TypeRef("Fusee.Serialization.SceneNodeContainer")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"), [$asm08.TypeRef("Fusee.Serialization.SceneContainer")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float4x4"), [$asm07.TypeRef("Fusee.Math.Core.float4x4"), $asm07.TypeRef("Fusee.Math.Core.float4x4")]))) ();
  };


  function FirstSteps__ctor () {
    this._camAngle = 0;
    $T00().prototype._ctor.call(this);
  }; 

  function FirstSteps_Init () {
    (this.RenderCanvas$RC$value.ClearColor = $S00().Construct(1, 1, 1, 1));
    var expr_2C = new ($T03())();
    expr_2C.Scale = $S01().Construct(1, 1, 1);
    expr_2C.Translation = $S01().Construct(0, 0, 0);
    this._cubeTransform = expr_2C;
    var expr_6A = new ($T05())();
    var expr_70 = new ($T06())();
    expr_70.Color = $S01().Construct(0.5, 0.7, 0);
    expr_6A.Diffuse = expr_70;
    var expr_95 = new ($T07())();
    expr_95.Color = $T04().One.MemberwiseClone();
    expr_95.Shininess = 4;
    expr_6A.Specular = expr_95;
    var cubeMesh = $T09().CreateCuboid($S01().Construct(10, 10, 10));
    var cubeNode = new ($T0A())();
    cubeNode.Components = $S02().Construct();
    $S03().CallVirtual("Add", null, cubeNode.Components, this._cubeTransform);
    $S03().CallVirtual("Add", null, cubeNode.Components, expr_6A);
    $S03().CallVirtual("Add", null, cubeNode.Components, cubeMesh);
    this._scene = new ($T0C())();
    this._scene.Children = $S04().Construct();
    $S05().CallVirtual("Add", null, this._scene.Children, cubeNode);
    this._sceneRenderer = $S06().Construct(this._scene);
    var expr_14C = new ($T03())();
    expr_14C.Scale = $S01().Construct(1, 1, 1);
    expr_14C.Translation = $S01().Construct(0, 0, 0);
    this._cubeTransform1 = expr_14C;
    var expr_18A = new ($T05())();
    var expr_190 = new ($T06())();
    expr_190.Color = $S01().Construct(0.5, 1, 0.5);
    expr_18A.Diffuse = expr_190;
    var expr_1B5 = new ($T07())();
    expr_1B5.Color = $T04().One.MemberwiseClone();
    expr_1B5.Shininess = 4;
    expr_18A.Specular = expr_1B5;
    var cubeMesh2 = $T09().CreateCuboid($S01().Construct(1, 1, 1));
    var cubeNode2 = new ($T0A())();
    cubeNode2.Components = $S02().Construct();
    $S03().CallVirtual("Add", null, cubeNode2.Components, this._cubeTransform1);
    $S03().CallVirtual("Add", null, cubeNode2.Components, expr_18A);
    $S03().CallVirtual("Add", null, cubeNode2.Components, cubeMesh2);
    this._scene1 = new ($T0C())();
    this._scene1.Children = $S04().Construct();
    $S05().CallVirtual("Add", null, this._scene1.Children, cubeNode2);
    this._sceneRenderer1 = $S06().Construct(this._scene1);
    var expr_274 = new ($T03())();
    expr_274.Scale = $S01().Construct(1, 1, 1);
    expr_274.Translation = $S01().Construct(0, 0, 0);
    this._cubeTransform2 = expr_274;
    var expr_2B2 = new ($T05())();
    var expr_2B8 = new ($T06())();
    expr_2B8.Color = $S01().Construct(0, (2 * +$T0F().Sin(0.2 * +$T10().get_TimeSinceStart())), 0.5);
    expr_2B2.Diffuse = expr_2B8;
    var expr_2EE = new ($T07())();
    expr_2EE.Color = $T04().One.MemberwiseClone();
    expr_2EE.Shininess = 4;
    expr_2B2.Specular = expr_2EE;
    var cubeMesh3 = $T09().CreateCuboid($S01().Construct(1, 1, 1));
    var cubeNode3 = new ($T0A())();
    cubeNode3.Components = $S02().Construct();
    $S03().CallVirtual("Add", null, cubeNode3.Components, this._cubeTransform2);
    $S03().CallVirtual("Add", null, cubeNode3.Components, expr_2B2);
    $S03().CallVirtual("Add", null, cubeNode3.Components, cubeMesh3);
    this._scene2 = new ($T0C())();
    this._scene2.Children = $S04().Construct();
    $S05().CallVirtual("Add", null, this._scene2.Children, cubeNode3);
    this._sceneRenderer2 = $S06().Construct(this._scene2);
  }; 

  function FirstSteps_RenderAFrame () {
    (this.RenderCanvas$RC$value).Clear($T11().$Flags("Color", "Depth"));
    (this._sceneRenderer).Render(this.RenderCanvas$RC$value);
    this._cubeTransform.Translation = $S01().Construct((2 * +$T0F().Sin(7 * +$T10().get_TimeSinceStart())), (10 * +$T0F().Sin(0.5 * +$T10().get_TimeSinceStart())), 0);
    (this._sceneRenderer1).Render(this.RenderCanvas$RC$value);
    this._cubeTransform1.Translation = $S01().Construct(-25, 0, (5 * +$T0F().Sin(0.2 * +$T10().get_TimeSinceStart())));
    this._cubeTransform1.Scale = $S01().Construct(1, 1, (5 * +$T0F().Sin(0.2 * +$T10().get_TimeSinceStart())));
    (this._sceneRenderer2).Render(this.RenderCanvas$RC$value);
    this._cubeTransform2.Translation = $S01().Construct(10, (5 * +$T0F().Sin(5 * +$T10().get_TimeSinceStart())), 0);
    this._cubeTransform2.Scale = $S01().Construct(1, (1 * +$T0F().Sin(5 * +$T10().get_TimeSinceStart())), 5);
    this._camAngle = +this._camAngle + (1.57079637 * +$T10().get_DeltaTime());
    (this.RenderCanvas$RC$value.View = $S07().CallStatic($T12(), "op_Multiply", null, 
        $T12().CreateTranslation(0, 0, 50).MemberwiseClone(), 
        $T12().CreateRotationY(this._camAngle).MemberwiseClone()
      ).MemberwiseClone());
    this.Present();
  }; 

  function FirstSteps_Resize () {
    (this.RenderCanvas$RC$value).Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    var aspectRatio = +((+(this.get_Width()) / +(this.get_Height())));
    var projection = $T12().CreatePerspectiveFieldOfView(0.7853982, aspectRatio, 1, 20000);
    (this.RenderCanvas$RC$value.Projection = projection.MemberwiseClone());
  }; 

  JSIL.MakeType({
      BaseType: $asm04.TypeRef("Fusee.Engine.Core.RenderCanvas"), 
      Name: "Fusee.Tutorial.Core.FirstSteps", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      FirstSteps__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      JSIL.MethodSignature.Void, 
      FirstSteps_Init
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      JSIL.MethodSignature.Void, 
      FirstSteps_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      JSIL.MethodSignature.Void, 
      FirstSteps_Resize
    );

    $.Field({Static:false, Public:false}, "_scene", $asm08.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_sceneRenderer", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_scene1", $asm08.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_sceneRenderer1", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_scene2", $asm08.TypeRef("Fusee.Serialization.SceneContainer"));

    $.Field({Static:false, Public:false}, "_sceneRenderer2", $asm04.TypeRef("Fusee.Engine.Core.SceneRenderer"));

    $.Field({Static:false, Public:false}, "_camAngle", $.Single);

    $.Field({Static:false, Public:false}, "_cubeTransform", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:false}, "_cubeTransform1", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));

    $.Field({Static:false, Public:false}, "_cubeTransform2", $asm08.TypeRef("Fusee.Serialization.TransformComponent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.FirstSteps+_cubeDiffuse */ 

(function _cubeDiffuse$Members () {
  var $, $thisType;

  function _cubeDiffuse__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm15.TypeRef("System.Object"), 
      Name: "Fusee.Tutorial.Core.FirstSteps+_cubeDiffuse", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      _cubeDiffuse__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Tutorial.Core.SimpleMeshes */ 

(function SimpleMeshes$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm15.System.Single)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm15.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm15.System.NotImplementedException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.Fusee.Math.Core.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.Fusee.Serialization.MeshComponent)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm07.Fusee.Math.Core.float3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm15.System.UInt16)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.Fusee.Math.Core.float2)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.Fusee.Math.Core.AABBf)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm15.TypeRef("System.NotImplementedException"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [
        $asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single"), 
        $asm15.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("Fusee.Math.Core.float2"), [$asm15.TypeRef("System.Single"), $asm15.TypeRef("System.Single")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("Fusee.Math.Core.float3"), [$asm15.TypeRef("System.Single"), $asm07.TypeRef("Fusee.Math.Core.float3")]))) ();
  };


  function SimpleMeshes_CreateCone (radius, height, segments) {
    return $thisType.CreateConeFrustum(radius, 0, height, segments);
  }; 

  function SimpleMeshes_CreateConeFrustum (radiuslower, radiusupper, height, segments) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateCuboid (size) {
    var meshComponent = new ($T04())();
    var expr_0F = JSIL.Array.New($T03(), 24);
    var float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[0] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[1] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[2] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[3] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[4] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[5] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[6] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[7] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[8] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[9] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[10] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[11] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[12] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[13] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[14] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[15] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[16] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[17] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[18] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = 0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[19] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[20] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = 0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[21] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = 0.5 * +size.z;
    expr_0F[22] = float.MemberwiseClone();
    float = new ($T03())();
    float.x = -0.5 * +size.x;
    float.y = -0.5 * +size.y;
    float.z = -0.5 * +size.z;
    expr_0F[23] = float.MemberwiseClone();
    meshComponent.Vertices = expr_0F;
    meshComponent.Triangles = JSIL.Array.New($T06(), [0, 2, 1, 0, 3, 2, 4, 6, 5, 4, 7, 6, 8, 10, 9, 8, 11, 10, 12, 14, 13, 12, 15, 14, 16, 18, 17, 16, 19, 18, 20, 22, 21, 20, 23, 22]);
    meshComponent.Normals = JSIL.Array.New($T03(), [$S01().Construct(0, 0, 1), $S01().Construct(0, 0, 1), $S01().Construct(0, 0, 1), $S01().Construct(0, 0, 1), $S01().Construct(1, 0, 0), $S01().Construct(1, 0, 0), $S01().Construct(1, 0, 0), $S01().Construct(1, 0, 0), $S01().Construct(0, 0, -1), $S01().Construct(0, 0, -1), $S01().Construct(0, 0, -1), $S01().Construct(0, 0, -1), $S01().Construct(-1, 0, 0), $S01().Construct(-1, 0, 0), $S01().Construct(-1, 0, 0), $S01().Construct(-1, 0, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, 1, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, -1, 0), $S01().Construct(0, -1, 0)]);
    meshComponent.UVs = JSIL.Array.New($T07(), [$S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0), $S02().Construct(1, 0), $S02().Construct(1, 1), $S02().Construct(0, 1), $S02().Construct(0, 0)]);
    meshComponent.BoundingBox = new ($T08())($S03().CallStatic($T03(), "op_Multiply", null, -0.5, size.MemberwiseClone()).MemberwiseClone(), $S03().CallStatic($T03(), "op_Multiply", null, 0.5, size.MemberwiseClone()).MemberwiseClone());
    return meshComponent;
  }; 

  function SimpleMeshes_CreateCylinder (radius, height, segments) {
    return $thisType.CreateConeFrustum(radius, radius, height, segments);
  }; 

  function SimpleMeshes_CreatePyramid (baselen, height) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateTetrahedron (edgelen) {
    throw $S00().Construct();
  }; 

  function SimpleMeshes_CreateTorus (mainradius, segradius, segments, slices) {
    throw $S00().Construct();
  }; 

  JSIL.MakeStaticClass("Fusee.Tutorial.Core.SimpleMeshes", true, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:true }, "CreateCone", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32
        ]), 
      SimpleMeshes_CreateCone
    );

    $.Method({Static:true , Public:true }, "CreateConeFrustum", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Single, $.Int32
        ]), 
      SimpleMeshes_CreateConeFrustum
    );

    $.Method({Static:true , Public:true }, "CreateCuboid", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$asm07.TypeRef("Fusee.Math.Core.float3")]), 
      SimpleMeshes_CreateCuboid
    );

    $.Method({Static:true , Public:true }, "CreateCylinder", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32
        ]), 
      SimpleMeshes_CreateCylinder
    );

    $.Method({Static:true , Public:true }, "CreatePyramid", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$.Single, $.Single]), 
      SimpleMeshes_CreatePyramid
    );

    $.Method({Static:true , Public:true }, "CreateTetrahedron", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [$.Single]), 
      SimpleMeshes_CreateTetrahedron
    );

    $.Method({Static:true , Public:true }, "CreateTorus", 
      new JSIL.MethodSignature($asm08.TypeRef("Fusee.Serialization.MeshComponent"), [
          $.Single, $.Single, 
          $.Int32, $.Int32
        ]), 
      SimpleMeshes_CreateTorus
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

